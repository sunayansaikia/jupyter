import base64
from kubernetes import client, config

def create_secret_from_binary_file(namespace, secret_name, file_path):
    # Load the Kubernetes configuration
    config.load_kube_config()

    # Create a Kubernetes API client
    api = client.CoreV1Api()

    # Read binary data from the file
    with open(file_path, "rb") as file:
        file_data = file.read()

    # Encode binary data as base64
    encoded_data = base64.b64encode(file_data).decode("utf-8")

    # Create the Secret object
    secret = client.V1Secret()
    secret.metadata = client.V1ObjectMeta(name=secret_name, namespace=namespace)
    secret.type = "Opaque"
    secret.data = {"keytab_data": encoded_data}

    # Create the Secret
    api.create_namespaced_secret(namespace=namespace, body=secret)
    print("Secret created successfully!")

# Define the namespace, secret name, and file path for the Secret
namespace = "your-namespace"
secret_name = "your-secret"
file_path = "/path/to/your/keytabfile.keytab"

# Create the Secret from the binary file
create_secret_from_binary_file(namespace, secret_name, file_path)

